#!groovy
properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '5', numToKeepStr: '10')), disableConcurrentBuilds(), disableResume(), parameters([string(defaultValue: 'create', description: '', name: 'OPERATION', trim: true), string(defaultValue: '1', description: '', name: 'OPTION', trim: true)])])
node('builder-1') {
  ansiColor('xterm') {
    stage('Checkout')  {
      git credentialsId: 'master-github-ssh', url: 'git@github.com:Ihor-Porokhnia/CICD.git'
    }

    stage('Set Tools') {

      script {
        def tfHome = tool name: 'Terraform'
        env.PATH = "${tfHome}:${env.PATH}"
      }
    }

    stage('TerraPlay')  {
      if (OPERATION == 'create') {
        withCredentials([[$class: 'VaultTokenCredentialBinding', addrVariable: 'VAULT_ADDR', credentialsId: 'az01tf1', tokenVariable: 'VAULT_TOKEN', vaultAddr: 'https://vault.bugoga.ga'], string(credentialsId: 'tf-cloud-token', variable: 'TFE_TOKEN')]) {
          //TF_LOG=DEBUG OCI_GO_SDK_DEBUG=v          
          sh "echo 'credentials \"app.terraform.io\" { token = \"${TFE_TOKEN}\" } ' > $HOME/.terraformrc"
          sh 'terraform init -reconfigure -var-file="./devexp/terra/terraform.tfvars" ./devexp/terra/create_infrastructure'
          //sh 'terraform plan -var-file="./devexp/terra/create_infrastructure/terraform.tfvars" ./devexp/terra/create_infrastructure'
          //sh 'terraform graph  ./devexp/terra/create_infrastructure > gra'
          try { sh 'terraform apply -auto-approve -var-file="./devexp/terra/terraform.tfvars" ./devexp/terra/create_infrastructure' }
          finally { sh 'rm $HOME/.terraformrc' }
        }
      }

      else if (OPERATION == 'destroy') {
        withCredentials([[$class: 'VaultTokenCredentialBinding', addrVariable: 'VAULT_ADDR', credentialsId: 'az01tf1', tokenVariable: 'VAULT_TOKEN', vaultAddr: 'https://vault.bugoga.ga'], string(credentialsId: 'tf-cloud-token', variable: 'TFE_TOKEN')]) {
          sh "echo 'credentials \"app.terraform.io\" { token = \"${TFE_TOKEN}\" } ' > $HOME/.terraformrc"
          sh 'terraform init  -var-file="./devexp/terra/terraform.tfvars" ./devexp/terra/create_infrastructure'
          try { sh 'terraform destroy -auto-approve -var-file="./devexp/terra/terraform.tfvars" ./devexp/terra/create_infrastructure' }
          finally { sh 'rm $HOME/.terraformrc' }
        }
      }

      else if (OPERATION == 'delivery') {
        withCredentials([[$class: 'VaultTokenCredentialBinding', addrVariable: 'VAULT_ADDR', credentialsId: 'az01tf1', tokenVariable: 'VAULT_TOKEN', vaultAddr: 'https://vault.bugoga.ga'], string(credentialsId: 'tf-cloud-token', variable: 'TFE_TOKEN')]) {
          sh "echo 'credentials \"app.terraform.io\" { token = \"${TFE_TOKEN}\" } ' > $HOME/.terraformrc"
          sh 'terraform init -reconfigure  -var-file="./devexp/terra/terraform.tfvars" ./devexp/terra/delivery_artifact'
          try { sh 'terraform apply -auto-approve -var-file="./devexp/terra/terraform.tfvars" ./devexp/terra/delivery_artifact' }
          finally { sh 'rm $HOME/.terraformrc' }
        }
      }



    }
  }
}
