#!groovy

properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '10', numToKeepStr: '5'))])


parallel Backend: {
node('Backend'){

 
    
    
    if ( ref == 'refs/heads/backend' )  {
        lock(resource: 'myResource', inversePrecedence: true){
         
        stage('Checkout')  {            
            git branch: 'backend', credentialsId: 'ssh-key-main', url: 'git@github.com:Ihor-Porokhnia/WebApp.git'
        }
        
        
        
        stage('Build') {
            try { 
            sh 'mvn versions:set  -DnewVersion=0.0.' + env.BUILD_ID +'-SNAPSHOT'
            telegramSend(message: 'Backend build #' + env.BUILD_ID + ' successfully done' , chatId: -393518449)
            sh 'mvn clean install'
            
        }
        catch (exc) {
            telegramSend(message: 'Backend build #' + env.BUILD_ID + ' failed' , chatId: -393518449)
            error 'FAIL'
        }
        }
        stage('Test') {} 
        stage('Deploy')  {
           try {
               sh 'sudo cp target/Backend-0.0.'+ env.BUILD_ID + '-SNAPSHOT.war /opt/tomcat/latest/webapps/Backend.war'
               sh 'sudo systemctl restart tomcat'
               sh 'sudo systemctl restart nginx'
               telegramSend(message: 'Staging backend build #' + env.BUILD_ID + ' successfully done' , chatId: -393518449)
           }
            catch (exc) {
            telegramSend(message: 'Staging backend build #' + env.BUILD_ID + ' failed' , chatId: -393518449)
            error 'FAIL'
            
        }
        }
        }    
    } else {
              sh 'echo notback'
    }

}
    }, 
         Frontend: {
node('Frontend'){
    if ( ref == 'refs/heads/frontend')  {
        lock(resource: 'myResource', inversePrecedence: true){
          stage('Checkout')  {            
            git branch: 'frontend', credentialsId: 'ssh-key-main', url: 'git@github.com:Ihor-Porokhnia/WebApp.git'
        }
         stage('Build') {
          try{
           sh 'file web/index.html'
           sh 'file web/js/script.js'
           sh 'file web/css/main.css'
           telegramSend(message: 'Frontend build #' + env.BUILD_ID + ' successfully done' , chatId: -393518449)
          }
          catch (exc) {
           telegramSend(message: 'Frontend files on build #' + env.BUILD_ID + ' missing' , chatId: -393518449)
            error 'FAIL'
          }
         }
         stage('Test') {}
         stage('Deploy') {
          try{
           sh 'scp -r -i ~/.ssh/id_rsa web/* ubuntu@back.bugoga.ga:/var/www/front'
           telegramSend(message: 'Frontend deploy #' + env.BUILD_ID + ' successfully done' , chatId: -393518449)
          }
          catch (exc) {
           telegramSend(message: 'Frontend deploy #' + env.BUILD_ID + ' failed' , chatId: -393518449)
            error 'FAIL'
          }
         
         }
       }
    } else {
              sleep 5
              sh 'echo notfront'
              sh 'uptime'
              lock(resource: 'myResource', inversePrecedence: true){
              }
              sh 'uptime'
        }
    }
}
 
