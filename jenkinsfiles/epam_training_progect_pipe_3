#!groovy

properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '10', numToKeepStr: '5'))])


node('Backend'){

lock(resource: 'myResource', inversePrecedence: true){
    
    
    if ( ref == 'refs/heads/backend' )  {
        stage('Checkout')  {            
            git branch: 'backend', credentialsId: 'ssh-key-main', url: 'git@github.com:Ihor-Porokhnia/WebApp.git'
        }
        
        
        
        stage('Build') {
            try { 
            sh 'mvn versions:set  -DnewVersion=0.0.' + env.BUILD_ID +'-SNAPSHOT'
            telegramSend(message: 'Build # ' + env.BUILD_ID + ' successfully done' , chatId: -393518449)
            sh 'mvn clean install'
            
        }
        catch (exc) {
            telegramSend(message: 'Build # ' + env.BUILD_ID + ' successfully failed' , chatId: -393518449)
            error 'FAIL'
        }
        }
        stage('Deploy')  {
           try {
               sh 'sudo cp target/Backend-0.0.'+ env.BUILD_ID + '-SNAPSHOT.war /opt/tomcat/latest/webapps/Backend.war'
               sh 'sudo systemctl restart tomcat'
               sh 'sudo systemctl restart nginx'
               telegramSend(message: 'Staging deploy build # ' + env.BUILD_ID + ' successfully done' , chatId: -393518449)
           }
            catch (exc) {
            telegramSend(message: 'Staging deploy build # ' + env.BUILD_ID + ' successfully failed' , chatId: -393518449)
            error 'FAIL'
            
        }
        }
             
    } else {
              sh 'echo notback'
    }
}
}

node('Frontend'){
    if ( ref == 'refs/heads/frontend')  {
              sh 'echo $ref'
    } else {
              sh 'echo notfront'
              sh 'uptime'
              lock(resource: 'myResource', inversePrecedence: true){
              }
              sh 'uptime'
    }
}
